// Copyright (c) 2017, Kai-Zhang
// Use of this source code is governed by a MIT license that can be
// found in the LICENSE file.
//
// Author: Kai Zhang (cs.zhangkai@outlook.com)

package orion.service;

option cc_generic_services = true;

message PutRequest {
    required string key = 1;
    required bytes value = 2;
}

message PutResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

message GetRequest {
    required string key = 1;
}

message GetResponse {
    required int32 status = 1;
    optional bytes value = 2;
    optional string leader_id = 3;
}

message DeleteRequest {
    required string key = 1;
}

message DeleteResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

message KeepAliveRequest {
}

message KeepAliveResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

message WatchRequest {
    required string key = 1;
}

message WatchResponse {
    required int32 status = 1;
    optional string leader_id = 2;
    optional string key = 3;
    optional bytes value = 4;
    optional bool deleted = 5;
}

message LockRequest {
    required string key = 1;
}

message LockResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

message UnlockRequest {
    required string key = 1;
}

message UnlockResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

message RegisterRequest {
}

message RegisterResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

message DestroyRequest {
}

message DestroyResponse {
    required int32 status = 1;
    optional string leader_id = 2;
}

service OrionService {
    rpc put(PutRequest) returns (PutResponse);
    rpc get(GetRequest) returns (GetResponse);
    rpc remove(DeleteRequest) returns (DeleteResponse);
    rpc keep_alive(KeepAliveRequest) returns (KeepAliveResponse);
    rpc watch(WatchRequest) returns (WatchResponse);
    rpc lock(LockRequest) returns (LockResponse);
    rpc unlock(UnlockRequest) returns (UnlockResponse);
    rpc enroll(RegisterRequest) returns (RegisterResponse);
    rpc destroy(DestroyRequest) returns (DestroyResponse);
}

